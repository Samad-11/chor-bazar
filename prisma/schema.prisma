generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  inStock     Boolean
  colors      Color[]
  reviews     Review[]
  orders      OrderItem[]
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
}

type Color {
  color     String
  colorCode String
  images    String[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Float
  comment     String
  createdDate DateTime
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

enum ROLE {
  ADMIN
  USER
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  products Product[]
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
}

model Payment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String   @unique @db.ObjectId
  razorpayOrderId   String
  razorpayPaymentId String
  razorpaySignature String
  order             Order    @relation(fields: [orderId], references: [id])
  createdAt         DateTime @default(now())
}

model OrderItem {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String  @db.ObjectId
  productId    String  @db.ObjectId
  quantity     Int
  productColor String
  price        Float
  order        Order   @relation(fields: [orderId], references: [id])
  Product      Product @relation(fields: [productId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  address       Address?
  accounts      Account[]
  sessions      Session[]

  role           ROLE     @default(USER)
  hashedPassword String?
  reviews        Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Address {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  address1 String
  address2 String
  city     String
  state    String
  pin      String
  phone    String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// model User {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   name           String
//   email          String    @unique
//   emailVerified  DateTime?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
//   role           ROLE      @default(USER)
//   hashedPassword String?
//   reviews        Review[]
//   orders         Order[]
//   accounts       Account[]
// }
